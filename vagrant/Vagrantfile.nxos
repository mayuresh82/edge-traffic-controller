# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

UUID = "OGVIFL"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    config.ssh.insert_key = false
    id = 1

    re_name  = ( "vqfx" + id.to_s ).to_sym
    pfe_name = ( "vqfx" + id.to_s + "-pfe" ).to_sym
    nxos_name = ( "nxos" + id.to_s ).to_sym

    ##############################
    ## Packet Forwarding Engine ##
    ##############################
    config.vm.define pfe_name do |vqfxpfe|
        vqfxpfe.ssh.insert_key = false
        vqfxpfe.vm.box = 'juniper/vqfx10k-pfe'

        # DO NOT REMOVE / NO VMtools installed
        vqfxpfe.vm.synced_folder '.', '/vagrant', disabled: true
        vqfxpfe.vm.network 'private_network', auto_config: false, nic_type: '82540EM', virtualbox__intnet: "#{UUID}_vqfx_internal_#{id}"

        # In case you have limited resources, you can limit the CPU used per vqfx-pfe VM, usually 50% is good
        # vqfxpfe.vm.provider "virtualbox" do |v|
        #    v.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]
        # end
    end

    ##########################
    ## Routing Engine  #######
    ##########################
    config.vm.define re_name do |vqfx|
        vqfx.vm.hostname = "vqfx#{id}"
        vqfx.vm.box = 'juniper/vqfx10k-re'

        # DO NOT REMOVE / NO VMtools installed
        vqfx.vm.synced_folder '.', '/vagrant', disabled: true

        # Management port
        vqfx.vm.network 'private_network', auto_config: false, nic_type: '82540EM', virtualbox__intnet: "#{UUID}_vqfx_internal_#{id}"
        vqfx.vm.network 'private_network', auto_config: false, nic_type: '82540EM', virtualbox__intnet: "#{UUID}_reserved-bridge"

        # Dataplane ports
        (1..2).each do |seg_id|
           vqfx.vm.network 'private_network', auto_config: false, nic_type: '82540EM', virtualbox__intnet: "#{UUID}_seg#{seg_id}"
        end
    end

    ##########################
    ## NXOS            #######
    ##########################
    config.vm.define nxos_name do |nxos|
        nxos.vm.hostname = "nxos#{id}"
        nxos.vm.box = "cisco/nxos-v"

        # Turn off shared folders
        nxos.vm.synced_folder ".", "/vagrant", disabled: true 

        nxos.vm.network :forwarded_port, guest: 22, host: 12201, id: 'ssh'

        # Dataplane ports
        (1..2).each do |seg_id|
           nxos.vm.network 'private_network', auto_config: false, nic_type: '82540EM', virtualbox__intnet: "#{UUID}_seg#{seg_id}"
        end

        # Dataplane ports - server facing
         (3..4).each do |seg_id|
            nxos.vm.network 'private_network', auto_config: false, nic_type: '82540EM', virtualbox__intnet: "HOST_seg#{seg_id}"
        end

		nxos.vm.provider "virtualbox" do |v|
            v.customize ["modifyvm", :id, "--nicpromisc4", "allow-all"]
            v.customize ["modifyvm", :id, "--nicpromisc5", "allow-all"]
        end
    end

    ##########################
    ## Server          #######
    ##########################
    (3..4).each do |seg_id|
        config.vm.define "srv#{seg_id}" do |srv|
            srv.vm.box = "ubuntu/bionic64"
            srv.vm.hostname = "server" + seg_id.to_s
            srv.vm.network 'private_network', ip: "10.1.#{seg_id}.100", virtualbox__intnet: "HOST_seg#{seg_id}"
            srv.ssh.insert_key = true
        end
    end
end
